{"version":3,"sources":["components/Template.jsx","components/Meme.jsx","App.js","index.js"],"names":["Templates","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","x","i","box_count","push","console","log","src","alt","xx","type","placeholder","onChange","e","newBoxes","text","target","value","box","index","fetch","then","res","json","data","generatememe","App","setTemplates","useEffect","memes","Template","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAqBeA,EArBG,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,UAAUC,EAAa,EAAbA,QAC1B,OACI,sBAAKC,UAAU,YAAf,UACF,gDACCF,EAAUG,KAAI,SAAAC,GAAQ,OACnB,qBAAuBF,UAAU,WAC7BG,QAAS,WACTJ,EAAQG,IAFZ,SAIA,qBAAKE,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,MAC7BN,UAAU,WALAE,EAASK,W,OCoDdC,EAxDF,SAAC,GASV,IATgC,IAApBC,EAAmB,EAAnBA,KAAKV,EAAc,EAAdA,QACjB,EAAwBW,mBAAS,CAC7BC,YAAaF,EAAKF,GAClBK,SAAU,aACVC,SAAU,aACVC,MAAM,KAJV,mBAAOC,EAAP,KAAaC,EAAb,KAMIC,EAAI,GAECC,EAAI,EAAGA,EAAIT,EAAKU,UAAWD,IAChCD,EAAEG,KAAKF,GAiBX,OADAG,QAAQC,IAAIb,GAER,sBAAKT,UAAU,OAAf,UACI,qBAAKuB,IAAKd,EAAKH,IAAKkB,IAAI,MACxB,8BAEQP,EAAEhB,KAAI,SAAAwB,GAEF,OAAO,uBAAgBC,KAAK,OACxBC,YAAW,uBAAkBF,EAAG,GAChCG,SAAU,SAACC,GACP,IAAMC,EAAWf,EAAKD,MACtBgB,EAASL,GAAM,CAAEM,KAAMF,EAAEG,OAAOC,OAChCjB,EAAQ,2BAAID,GAAL,IAAUD,MAAMgB,OALZL,QAU/B,gCACI,wBAAQtB,QAAS,YAjCR,WACjB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAACiC,EAAKC,GACjB7B,GAAK,UAAF,OAAY6B,EAAZ,mBAA4BD,EAAIH,SAEvCV,QAAQC,IAAIhB,GACZ8B,MAAM9B,GACD+B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEHzC,EAAQ,2BAAIU,GAAL,IAAUH,IAAIkC,EAAKA,KAAKlC,UAwB3BmC,IADJ,2BAGA,wBAAQtC,QAAS,WACbJ,EAAQ,OADZ,oC,MCrBD2C,MAvBf,WAEE,MAAkChC,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkB6C,EAAlB,KACA,EAAqBjC,mBAAS,MAA9B,mBAAOD,EAAP,KAAYV,EAAZ,KAUA,OARA6C,qBAAU,WACRR,MAAM,qCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLG,EAAaH,EAAKA,KAAKK,OACvBxB,QAAQC,IAAIkB,EAAKA,KAAKK,YAE1B,IAGA,qBAAK7C,UAAU,MAAf,SAEY,OAATS,EAAgB,cAACqC,EAAD,CAAUhD,UAAWA,EAAWC,QAASA,IAAc,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAAWA,OChB3GgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.89cb4a56.chunk.js","sourcesContent":["const Templates = ({templates,setMeme}) => {\r\n    return (\r\n        <div className=\"templates\">\r\n      <h1>Meme Generator</h1>\r\n      {templates.map(template => (\r\n          <div key={template.id} className=\"template\"\r\n              onClick={() => {\r\n              setMeme(template)\r\n          }}>\r\n          <div style={{ backgroundImage: `url(${template.url})` }}\r\n          className=\"image\">\r\n            \r\n          </div>\r\n        </div>\r\n      ))}\r\n\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Templates","import React,{useState} from 'react'\r\nconst Meme = ({ meme,setMeme }) => {\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"imsandeep2\",\r\n        password: \"imsandeep2\",\r\n        boxes:[],\r\n    })\r\n    let x = []\r\n\r\n    for (let i = 0; i < meme.box_count; i++)\r\n        x.push(i)\r\n    \r\n    const generatememe = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`\r\n        form.boxes.map((box, index) => {\r\n            url+=`&boxes[${index}][text]=${box.text}`\r\n        })\r\n        console.log(url)\r\n        fetch(url)\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n            // console.log(data)\r\n                setMeme({...meme,url:data.data.url})\r\n        })\r\n        \r\n    }\r\n    console.log(meme)\r\n    return (\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"a\" />\r\n            <div>\r\n                {\r\n                    x.map(xx => {\r\n                        \r\n                        return <input key={xx} type=\"text\"\r\n                            placeholder={`Meme caption ${xx+1}`}\r\n                            onChange={(e) => {\r\n                                const newBoxes = form.boxes\r\n                                newBoxes[xx] = { text: e.target.value }\r\n                                setForm({...form,boxes:newBoxes})  \r\n                            }}\r\n                    />\r\n                    })}\r\n            </div>\r\n            <div>\r\n                <button onClick={() => {\r\n                    generatememe()\r\n                }}>Generate Meme</button>\r\n                <button onClick={() => {\r\n                    setMeme(null)\r\n                }}>Choose Template</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Meme","import React, { useEffect, useState } from 'react';\nimport Template from \"./components/Template\"\nimport Meme from \"./components/Meme\"\nimport './App.css';\n\nfunction App() {\n\n  const [templates, setTemplates] = useState([])\n  const [meme,setMeme]=useState(null)\n  \n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(res => res.json())\n      .then((data) => {\n        setTemplates(data.data.memes)\n        console.log(data.data.memes)\n      })\n  },[])\n  return (\n\n    <div className=\"App\">\n      \n      {meme === null ? <Template templates={templates} setMeme={setMeme} /> : <Meme meme={meme} setMeme = {setMeme}/>}\n      \n    </div>\n      );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}